generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  googleId  String? @unique
  email     String  @unique
  password  String?
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  username  String
  phone     String?
  picture   String?
  isActive  Boolean @default(true) @map("is_active")

  // Authentication
  lastLoginAt         DateTime? @map("last_login_at")
  emailVerifiedAt     DateTime? @map("email_verified_at")
  passwordResetToken  String?   @map("password_reset_token")
  passwordResetExpiry DateTime? @map("password_reset_expiry")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens RefreshToken[]
  userRoles     UserRole[]
  posts         Post[]
  products      Product[]
  Cart          Cart[]
  Order         Order[]
  address       Address[]
  AuditLog      AuditLog[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model PermissionGroup {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  permissions Permission[]

  @@map("permission_groups")
}

model Permission {
  id          String  @id @default(cuid())
  displayName String  @unique @map("display_name")
  name        String  @unique
  description String?
  resource    String
  action      String

  groupId String?          @map("group_id")
  group   PermissionGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  id String @id @default(cuid())

  // Relations
  userId String @map("user_id")
  roleId String @map("role_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id String @id @default(cuid())

  // Relations
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String? @db.Text
  published Boolean @default(false)

  // Relations
  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id           String  @id @default(cuid())
  name         String
  description  String?
  price        Float
  image        String?
  stock        Int     @default(0)
  isActive     String  @map("is_active")
  status       String
  statusManual Boolean @default(false)

  // Relations
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authorId   String   @map("author_id")
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  Cart      Cart[]
  OrderItem OrderItem[]

  @@map("products")
}

model Cart {
  id       String @id @default(cuid())
  quantity Int

  // Relations
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cart")
}

model Order {
  id      String      @id @default(cuid())
  userId  String      @map("user_id")
  user    User        @relation(fields: [userId], references: [id])
  status  String
  total   Float
  note    String?
  address String?
  items   OrderItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id])

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  quantity Int
  price    Float

  @@map("order_items")
}

model Address {
  id     String @id @default(cuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  fullName           String
  street             String
  city               String
  district           String?
  ward               String?
  zipCode            Int
  countryCallingCode String   @map("country_calling_code")
  country            String   @default("Vietnam")
  
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

model AuditLog {
  id     String  @id @default(cuid())
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  action   String
  entity   String
  entityId String
  metadata Json?

  createdAt DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}
